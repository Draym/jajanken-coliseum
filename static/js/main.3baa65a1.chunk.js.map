{"version":3,"sources":["game/data/JaJankenTechnique.tsx","web/views/HomeView.tsx","blockchain/Web3Utils.tsx","web/views/Navbar.tsx","blockchain/ContractLoader.tsx","utils/NumberUtils.tsx","blockchain/Lina.tsx","game/JaJanken.tsx","resources/techniques/guu.png","web/views/coliseum/ColiseumMatch.tsx","resources/techniques/chi.png","resources/techniques/paa.png","resources/techniques/hidden.png","resources/images.js","web/views/coliseum/JaJankenColiseum.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["JaJankenTechnique","HomeView","props","componentDidMount","a","setState","loading","startColiseum","history","push","state","this","id","className","onClick","Component","withRouter","Web3Utils","window","ethereum","request","method","web3","Web3","currentProvider","alert","eth","net","getId","getAccounts","defaultAccount","account","value","utils","fromAscii","Navbar","href","target","rel","icon","ContractLoader","getNetwork","networkId","console","log","JaJankenColiseumData","JaJankenColiseum","networks","Contract","abi","address","NumberUtils","parseInt","toString","Lina","data","call","from","send","getDefaultAccount","JaJanken","contract","methods","entranceTicketFee","getGameEntranceTicketFee","then","entranceTicket","joinGame","joinMatch","_","alivePlayers","totalPaa","totalChi","totalGuu","getProfile","profile","queued","inQueue","inMatch","nullAddress","nen","guu","paa","chi","playerAddress","getPlayer","player","techniques","matchId","matches","match","p2","p1Hidden","p2Hidden","p1Revealed","p2Revealed","playTime","revealTime","Player","key","localStorage","getItem","initKey","uuidv4","substring","setItem","None","technique","encodeAction","encode","getKey","encodedTechnique","playMatch","revealMatch","MatchState","MatchEnding","TechniqueImg","hidden","fromTechnique","Chi","Guu","Paa","GameState","ColiseumMatch","handleMatchEnd","event","savePlay","returnValues","matchState","Result","matchResult","result","winner","DRAW","WINNER","LOOSER","opponent","p1","opponentPlayed","p2Played","p1Played","handleMatchPlayed","Reveal","backToLobby","currentPick","backToPickPlay","PickPlay","pickGuu","Commit","pickChi","pickPaa","commitPlay","jajankenColiseum","CommitWait","revealPlay","RevealWait","nenBalance","availableGuu","availablePaa","availableChi","getPlayed","currentMatch","Loading","loadColiseumData","subscribeToGameEvents","coliseum","getMyProfile","getMatch","meHidden","opHidden","meRevealed","opRevealed","MatchEnded","nullBytes","getOpponent","events","MatchEnd","on","MatchPlayed","disabled","src","width","alt","opponentPick","handleStartMatch","gameState","InMatch","handlePlayerJoinGame","p","Lobby","getGameStats","game","joinColiseum","joinMatchQueue","LookingMatch","catch","error","nextProps","instantiateColiseum","setDefaultAccount","NeedPay","opponentId","NotValid","PlayerJoin","MatchStart","content","library","add","faGithub","faLinkedinIn","App","loadMetamask","loadBlockchainData","listenNetworkChanges","accounts","getEth","chainId","role","style","maxWidth","basename","process","path","network","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8n6yBAAYA,E,yHCWNC,E,kDAEF,WAAYC,GAA4B,IAAD,8BACnC,cAAMA,IAMVC,kBAPuC,sBAOnB,sBAAAC,EAAA,sDAChB,EAAKC,SAAS,CAACC,SAAS,IADR,2CAPmB,EAWvCC,cAXuC,sBAWvB,sBAAAH,EAAA,sDACZ,EAAKF,MAAMM,QAAQC,KAAK,aADZ,2CATZ,EAAKC,MAAQ,CACTJ,SAAS,GAHsB,E,0CAevC,WACI,OAAIK,KAAKD,MAAMJ,QACJ,mBAAGM,GAAG,SAASC,UAAU,cAAzB,wBAEA,8BACH,wBAAQA,UAAU,4BAA4BC,QAASH,KAAKJ,cAA5D,mC,GAtBOQ,aA4BRC,cAAWf,G,kBCnCLgB,E,wIAEjB,kFACQC,OAAOC,SADf,gCAEcD,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAFhD,cAGQH,OAAOI,KAAO,IAAIC,IAAKL,OAAOC,UAHtC,mBAIe,GAJf,WAMaD,OAAOI,KANpB,wBAOQJ,OAAOI,KAAO,IAAIC,IAAKL,OAAOI,KAAKE,iBAP3C,mBAQe,GARf,eAWQN,OAAOO,MAAM,uEAXrB,mBAYe,GAZf,4C,0EAiBA,WACI,OAAOP,OAAOC,W,+DAGlB,uGACWD,OAAOI,KAAKI,IAAIC,IAAIC,SAD/B,2C,sHAIA,uGACWV,OAAOI,KAAKI,IAAIG,eAD3B,2C,qFAIA,WACI,OAAOX,OAAOI,KAAKI,IAAII,iB,+BAG3B,SAAyBC,GACrBb,OAAOI,KAAKI,IAAII,eAAiBC,I,oBAGrC,SAAcC,GACX,OAAOd,OAAOI,KAAKW,MAAMC,UAAUF,K,yBAGtC,WACI,MAAO,+C,uBAGX,WACI,MAAO,yE,cCzCMG,E,kDACjB,WAAYjC,GAA0B,IAAD,8BACjC,cAAMA,IACDQ,MAAQ,CACTqB,QAAS7B,EAAM6B,QACfzB,SAAS,GAJoB,E,4FAQrC,sBAAAF,EAAA,sDACIO,KAAKN,SAAS,CAACC,SAAS,IAD5B,gD,0EAIA,WACI,OAAO,sBAAKO,UAAU,iEAAf,UACH,qBAAKA,UAAU,WAAf,SACI,mBAAGA,UAAU,eACVuB,KAAK,wCACLC,OAAO,SACPC,IAAI,sBAHP,SAII,iCAAM,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,YAArC,0BAGR,qBAAK1B,UAAU,uBAAf,SACI,sBAAMA,UAAU,eAAhB,iCAEJ,qBAAKA,UAAU,WAAf,SACI,uBAAOD,GAAG,UAAUC,UAAU,aAA9B,SAA4CF,KAAKT,MAAM6B,mB,GA3BnChB,a,kCCNfyB,E,+IACjB,sGAC4BvB,EAAUwB,aADtC,UACUC,EADV,OAEIC,QAAQC,IAAI,UAAWF,GAEjBG,EAAuBC,EAAiBC,SAASL,GACvDC,QAAQC,IAAI,uBAAwBC,IAChCA,EANR,0CAOe,IAAI3B,OAAOI,KAAKI,IAAIsB,SAASF,EAAiBG,IAAKJ,EAAqBK,UAPvF,eASQhC,OAAOO,MAAM,+DATrB,kBAUe,MAVf,4C,6DCNiB0B,E,yFACjB,SAAYnB,GACR,OAAOoB,SAASpB,EAAMqB,gB,cCATC,E,gIAEjB,WAAkBjC,GAAlB,0FAA+BkC,EAA/B,+BAA8C,GAA9C,kBACWlC,EAAOmC,KAAP,aAAaC,KAAMH,EAAKvB,WAAcwB,KADjD,2C,gHAIA,WAAkBlC,GAAlB,0FAA+BkC,EAA/B,+BAA8C,GAA9C,kBACWlC,EAAOqC,KAAP,aAAaD,KAAMH,EAAKvB,WAAcwB,KADjD,2C,4EAIA,WACI,OAAOtC,EAAU0C,wB,eNbb3D,O,eAAAA,I,aAAAA,I,aAAAA,I,cAAAA,M,kBOUS4D,E,oJAEjB,WAAsCC,GAAtC,iFACiBP,EAAKE,KAAKK,EAASC,QAAQC,qBAD5C,mF,wHAIA,WAA0BF,GAA1B,iEACIlD,KAAKqD,yBAAyBH,GAAUI,MAAK,SAAAC,GACzCZ,EAAKI,KAAKG,EAASC,QAAQK,WAAY,CAACnC,MAAOkC,OAFvD,gD,0HAMA,WAA4BL,GAA5B,iEACIP,EAAKI,KAAKG,EAASC,QAAQM,aAAaH,MAAK,SAAAI,OADjD,2C,wHAKA,WAA0BR,GAA1B,6FAC+BP,EAAKE,KAAKK,EAASC,QAAQQ,gBAD1D,cACUA,EADV,gBAE2BhB,EAAKE,KAAKK,EAASC,QAAQS,YAFtD,cAEUA,EAFV,gBAG2BjB,EAAKE,KAAKK,EAASC,QAAQU,YAHtD,cAGUA,EAHV,iBAI2BlB,EAAKE,KAAKK,EAASC,QAAQW,YAJtD,eAIUA,EAJV,yBAKW,CACHH,aAAcnB,EAAYM,KAAKa,GAC/BC,SAAUpB,EAAYM,KAAKc,GAC3BC,SAAUrB,EAAYM,KAAKe,GAC3BC,SAAUtB,EAAYM,KAAKgB,KATnC,4C,wHAaA,WAA0BZ,GAA1B,yFAC0BP,EAAKE,KAAKK,EAASC,QAAQY,cADrD,cACUC,EADV,gBAEyBrB,EAAKE,KAAKK,EAASC,QAAQc,UAFpD,UAEUA,EAFV,QAGQD,EAHR,0CAIe,CACHE,QAASD,IAAW3D,EAAU0C,oBAC9BmB,QAASH,EAAQG,UAAY7D,EAAU8D,cAAgB,KAAOJ,EAAQG,QACtEE,IAAK7B,EAAYM,KAAKkB,EAAQK,KAC9BC,IAAK9B,EAAYM,KAAKkB,EAAQM,KAC9BC,IAAK/B,EAAYM,KAAKkB,EAAQO,KAC9BC,IAAKhC,EAAYM,KAAKkB,EAAQQ,OAV1C,iCAYkB,MAZlB,4C,uHAeA,WAAyBtB,EAAeuB,GAAxC,0EACyB,MAAjBA,EADR,yCAEe,MAFf,uBAGyB9B,EAAKE,KAAKK,EAASC,QAAQuB,UAAUD,IAH9D,YAGUE,EAHV,iDAKe,CACHN,IAAK7B,EAAYM,KAAK6B,EAAON,KAC7BO,WAAYpC,EAAYM,KAAK6B,EAAOC,cAPhD,gCASkB,MATlB,4C,sHAYA,WAAsB1B,EAAe2B,GAArC,uFACwBlC,EAAKE,KAAKK,EAASC,QAAQ2B,QAAQD,IAD3D,YACUE,EADV,iDAGe,CACHC,GAAID,EAAMC,GACVC,SAAUF,EAAME,SAChBC,SAAUH,EAAMG,SAChBC,WAAY1C,SAASsC,EAAMI,YAC3BC,WAAY3C,SAASsC,EAAMK,YAC3BC,SAAU5C,SAASsC,EAAMM,UACzBC,WAAY7C,SAASsC,EAAMO,cAVvC,gCAYkB,MAZlB,2C,gEAzDiBrC,EAwEVsC,O,2FAEH,WACI,IAAIC,EAAMC,aAAaC,QAAQ,gBAAkB/C,EAAKvB,WAItD,OAHW,MAAPoE,IACAA,EAAMxF,KAAK2F,WAERH,I,qBAGX,WACI,IAAMA,EAAMI,cAASC,UAAU,EAAG,IAElC,OADAJ,aAAaK,QAAQ,gBAAkBnD,EAAKvB,UAAWoE,GAChDA,I,uBAGX,WACI,IAAIA,EAAMC,aAAaC,QAAQ,mBAAqB/C,EAAKvB,WACzD,OAAW,MAAPoE,GAAuB,KAARA,EACRnG,EAAkB0G,KAElBtD,SAAS+C,K,sBAIxB,SAAgBQ,GACZP,aAAaK,QAAQ,mBAAqBnD,EAAKvB,UAAW4E,EAAUtD,c,+DAGxE,WAAwBQ,EAAe2B,EAAiBmB,GAAxD,iEACIrD,EAAKE,KAAKK,EAASC,QAAQ8C,aAAatD,EAAKvB,UAAW4E,EAAW1F,EAAU4F,OAAOlG,KAAKmG,YAAY7C,MAAK,SAAA8C,GACtGzD,EAAKI,KAAKG,EAASC,QAAQkD,UAAUD,EAAkBvB,IAAUvB,MAAK,SAAAI,UAF9E,gD,0HAOA,WAAwBR,EAAe2B,EAAiBmB,GAAxD,iEACIrD,EAAKI,KAAKG,EAASC,QAAQmD,YAAYN,EAAW1F,EAAU4F,OAAOlG,KAAKmG,UAAWtB,IAAUvB,MAAK,SAAAI,OADtG,gD,kECtHO,ICUV6C,EAWAC,EDrBU,MAA0B,gCEA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,mCCM5BC,EAAe,CACxBnC,IAAKA,EACLE,IAAKA,EACLD,IAAKA,EACLmC,OAAQA,EACRC,cAAe,SAACX,GACZ,OAAIA,IAAc3G,EAAkBuH,IACzBpC,EACAwB,IAAc3G,EAAkBwH,IAChCvC,EACA0B,IAAc3G,EAAkByH,IAChCvC,EAEAmC,K,SJTdH,O,qBAAAA,I,uBAAAA,I,mBAAAA,I,2BAAAA,I,mBAAAA,I,2BAAAA,I,mBAAAA,I,4BAAAA,M,cAWAC,O,mBAAAA,I,mBAAAA,I,gBAAAA,M,SKVAO,ELyCCC,E,kDAEF,WAAYzH,GAAiC,IAAD,8BACxC,cAAMA,IAiHV0H,eAAiB,SAACC,GACdjE,EAASsC,OAAO4B,SAAS9H,EAAkB0G,MAC3C,IAAMnD,EAAOsE,EAAME,aACnB,EAAK1H,SAAS,CACV2H,WAAYd,EAAWe,OACvBC,YAAa,CACTC,OAAQ5E,EAAK6E,SAAWnH,EAAU8D,cAAgBoC,EAAYkB,KAAQ9E,EAAK6E,SAAW9E,EAAKvB,UAAYoF,EAAYmB,OAASnB,EAAYoB,OACxIC,SAAUjF,EAAKkF,KAAOnF,EAAKvB,UAAYwB,EAAKoC,GAAKpC,EAAKkF,GACtDC,eAAgBnF,EAAKkF,KAAOnF,EAAKvB,UAAYqB,SAASG,EAAKoF,UAAYvF,SAASG,EAAKqF,UACrFR,OAAQ7E,EAAK6E,WA3HmB,EAgI5CS,kBAAoB,SAACxE,GACjB,EAAKhE,SAAS,CACV2H,WAAYd,EAAW4B,UAlIa,EAsI5CC,YAAc,WACV,EAAK1I,SAAS,CAAC2I,YAAahJ,EAAkB0G,OAC9C,EAAKxG,MAAM6I,eAxI6B,EA2I5CE,eAAiB,WACbrF,EAASsC,OAAO4B,SAAS9H,EAAkB0G,MAC3C,EAAKrG,SAAS,CAAC2I,YAAahJ,EAAkB0G,KAAMsB,WAAYd,EAAWgC,YA7InC,EAgJ5CC,QAAU,WACNvF,EAASsC,OAAO4B,SAAS9H,EAAkBwH,KAC3C,EAAKnH,SAAS,CAAC2I,YAAahJ,EAAkBwH,IAAKQ,WAAYd,EAAWkC,UAlJlC,EAoJ5CC,QAAU,WACNzF,EAASsC,OAAO4B,SAAS9H,EAAkBuH,KAC3C,EAAKlH,SAAS,CAAC2I,YAAahJ,EAAkBuH,IAAKS,WAAYd,EAAWkC,UAtJlC,EAwJ5CE,QAAU,WACN1F,EAASsC,OAAO4B,SAAS9H,EAAkByH,KAC3C,EAAKpH,SAAS,CAAC2I,YAAahJ,EAAkByH,IAAKO,WAAYd,EAAWkC,UA1JlC,EA6J5CG,WA7J4C,sBA6J/B,sBAAAnJ,EAAA,sDACTwD,EAASsC,OAAOqD,WAAW,EAAKrJ,MAAMsJ,iBAAkB,EAAK9I,MAAMgF,MAAMF,QAAS,EAAK9E,MAAMsI,aAAa/E,MAAK,SAAAI,GAC3G,EAAKhE,SAAS,CAAC2H,WAAYd,EAAWuC,gBAFjC,2CA7J+B,EAmK5CC,WAnK4C,sBAmK/B,sBAAAtJ,EAAA,sEACHwD,EAASsC,OAAOwD,WAAW,EAAKxJ,MAAMsJ,iBAAkB,EAAK9I,MAAMgF,MAAMF,QAAS,EAAK9E,MAAMsI,aAAa/E,MAAK,SAAAI,GACjH,EAAKhE,SAAS,CAAC2H,WAAYd,EAAWyC,gBAFjC,2CAhKT,EAAKjJ,MAAQ,CACTkJ,WAAY,EACZC,aAAc,EACdC,aAAc,EACdC,aAAc,EACdf,YAAapF,EAASsC,OAAO8D,YAC7BtE,MAAOxF,EAAM+J,aACbjC,WAAYd,EAAWgD,QACvBhC,YAAa,MAXuB,E,4FAe5C,sBAAA9H,EAAA,sEACUO,KAAKwJ,mBADf,uBAEUxJ,KAAKyJ,wBAFf,gD,2HAKA,mCAAAhK,EAAA,sEACyBO,KAAKT,MAAMsJ,iBADpC,OACQa,EADR,OAEIzG,EAAS0G,aAAaD,GAAUpG,MAAK,SAAAU,GACzBA,EACoB,IAAhBA,EAAQK,KACR,EAAK3E,SAAS,CAAC2H,WAAYd,EAAWe,SACtC/G,OAAOO,MAAP,kBAAwB6B,EAAKvB,UAA7B,sEACuB,IAAhB4C,EAAQQ,KAA6B,IAAhBR,EAAQO,KAA6B,IAAhBP,EAAQM,KACzD,EAAK5E,SAAS,CAAC2H,WAAYd,EAAWe,SACtC/G,OAAOO,MAAP,kBAAwB6B,EAAKvB,UAA7B,0EAEA,EAAK1B,SAAS,CACVuJ,WAAYjF,EAAQK,IACpB6E,aAAclF,EAAQM,IACtB6E,aAAcnF,EAAQO,IACtB6E,aAAcpF,EAAQQ,IACtB6C,WAAYd,EAAWgC,YAI/B,EAAK7I,SAAS,CAAC2H,WAAYd,EAAWe,SACtC/G,OAAOO,MAAP,kBAAwB6B,EAAKvB,UAA7B,oDAGJ6B,EAAS2G,SAASF,EAAU,EAAK3J,MAAMgF,MAAMF,SAASvB,MAAK,SAAAyB,GAGnD,IAAI8E,EACAC,EACAC,EACAC,GALRhI,QAAQC,IAAI,wBAAyB8C,GACxB,MAATA,KAOIA,EAAMC,KAAO1E,EAAU8D,cACvB,EAAK1E,SAAS,CAAC2H,WAAYd,EAAW0D,cAElCtH,EAAKvB,YAAc,EAAKrB,MAAMgF,MAAMF,SACpCgF,EAAW9E,EAAME,SACjB6E,EAAW/E,EAAMG,SACjB6E,EAAahF,EAAMI,WACnB6E,EAAajF,EAAMK,aAEnByE,EAAW9E,EAAMG,SACjB4E,EAAW/E,EAAME,SACjB8E,EAAahF,EAAMK,WACnB4E,EAAajF,EAAMI,YAGnB4E,IAAe1K,EAAkB0G,KAC7BiE,IAAe3K,EAAkB0G,KACjC,EAAKrG,SAAS,CAAC2H,WAAYd,EAAWe,SAEtC,EAAK5H,SAAS,CAAC2H,WAAYd,EAAWyC,aAGtCgB,IAAe3K,EAAkB0G,KACjC,EAAKrG,SAAS,CAAC2H,WAAYd,EAAW4B,SAElC0B,IAAavJ,EAAU4J,YACnBJ,IAAaxJ,EAAU4J,YACvB,EAAKxK,SAAS,CAAC2H,WAAYd,EAAW4B,SAEtC,EAAKzI,SAAS,CAAC2H,WAAYd,EAAWuC,aAG1C,EAAKpJ,SAAS,CACV2I,YAAapF,EAASsC,OAAO8D,YAC7BhC,WAAYpE,EAASsC,OAAO8D,cAAgBhK,EAAkB0G,KAAOQ,EAAWkC,OAASlC,EAAWgC,mBAWxItF,EAASkH,YAAYT,EAAU1J,KAAKD,MAAMgF,MAAM+C,KAAOnF,EAAKvB,UAAYpB,KAAKD,MAAMgF,MAAMC,GAAKhF,KAAKD,MAAMgF,MAAM+C,IAAIxE,MAAK,SAAAuE,GACpH7F,QAAQC,IAAI,oBAAqB4F,MA/EzC,gD,gIAmFA,sBAAApI,EAAA,sEACUO,KAAKT,MAAMsJ,iBADrB,OAGI7I,KAAKT,MAAMsJ,iBAAiBuB,OAAOC,SAAS,CAACvC,GAAInF,EAAKvB,YACjDkJ,GAAG,OAAQtK,KAAKiH,gBACrBjH,KAAKT,MAAMsJ,iBAAiBuB,OAAOC,SAAS,CAACrF,GAAIrC,EAAKvB,YACjDkJ,GAAG,OAAQtK,KAAKiH,gBACrBjH,KAAKT,MAAMsJ,iBAAiBuB,OAAOG,YAAY,CAAC1F,QAAS7E,KAAKD,MAAMgF,MAAMF,UACrEyF,GAAG,OAAQtK,KAAKkI,mBARzB,gD,0EAkEA,WAAU,IAAD,OACDG,EAAc5B,EAAaE,cAAc3G,KAAKD,MAAMsI,aAoDxD,OAAO,gCACH,2CAAcrI,KAAKD,MAAMkJ,WAAzB,UAA4CjJ,KAAKD,MAAMmJ,aAAvD,SAA2ElJ,KAAKD,MAAMqJ,aAAtF,SAA0GpJ,KAAKD,MAAMoJ,aAArH,WAnDa,WACb,GAAI,EAAKpJ,MAAMsH,aAAed,EAAWgD,QACrC,OAAO,mBAAGtJ,GAAG,SAASC,UAAU,cAAzB,wBACJ,GAAI,EAAKH,MAAMsH,aAAed,EAAWgC,SAC5C,OAAO,gCACH,wBAAQpI,QAAS,EAAKqI,QAASgC,SAAsC,IAA5B,EAAKzK,MAAMmJ,aAApD,SAAwE,qBAAKhJ,UAAuC,IAA5B,EAAKH,MAAMmJ,aAAqB,eAAiB,GAAIuB,IAAKhE,EAAanC,IAAKoG,MAAO,IAAKC,IAAI,UACpL,wBAAQxK,QAAS,EAAKuI,QAAS8B,SAAsC,IAA5B,EAAKzK,MAAMqJ,aAApD,SAAwE,qBAAKlJ,UAAuC,IAA5B,EAAKH,MAAMqJ,aAAqB,eAAiB,GAAIqB,IAAKhE,EAAajC,IAAKkG,MAAO,IAAKC,IAAI,UACpL,wBAAQxK,QAAS,EAAKwI,QAAS6B,SAAsC,IAA5B,EAAKzK,MAAMoJ,aAApD,SAAwE,qBAAKjJ,UAAuC,IAA5B,EAAKH,MAAMoJ,aAAqB,eAAiB,GAAIsB,IAAKhE,EAAalC,IAAKmG,MAAO,IAAKC,IAAI,aAErL,GAAI,EAAK5K,MAAMsH,aAAed,EAAWkC,OAC5C,OAAO,gCACH,qBAAKgC,IAAKpC,EAAaqC,MAAO,IAAKC,IAAI,kBACvC,wBAAQzK,UAAW,YAAaC,QAAS,EAAKyI,WAA9C,0BACA,8BACI,wBAAQ1I,UAAW,YAAaC,QAAS,EAAKmI,eAA9C,mCAGL,GAAI,EAAKvI,MAAMsH,aAAed,EAAW4B,OAC5C,OAAO,gCACH,qBAAKsC,IAAKpC,EAAaqC,MAAO,IAAKC,IAAI,kBACvC,wBAAQzK,UAAW,YAAaC,QAAS,EAAK4I,WAA9C,uBAED,GAAI,EAAKhJ,MAAMsH,aAAed,EAAWe,OAAQ,CACpD,IAAIsD,EAAenE,EAAaE,cAAc,EAAK5G,MAAMwH,YAAaQ,gBACtE,OAAO,sBAAK7H,UAAU,MAAf,UACH,gCACI,qBAAKuK,IAAKpC,EAAaqC,MAAO,IAAKC,IAAI,kBACvC,4CACA,qBAAKF,IAAKG,EAAcF,MAAO,IAAKC,IAAI,qBAE5C,gCACI,sCAAS,EAAK5K,MAAMwH,YAAaC,SAAWhB,EAAYmB,OAAS,OAAU,EAAK5H,MAAMwH,YAAaC,SAAWhB,EAAYoB,OAAS,WAAa,cAChJ,wBAAQ1H,UAAW,YAAaC,QAAS,EAAKiI,YAA9C,kCAGL,OAAI,EAAKrI,MAAMsH,aAAed,EAAWuC,YAAc,EAAK/I,MAAMsH,aAAed,EAAWyC,WACxF,gCACH,qBAAKyB,IAAKpC,EAAaqC,MAAO,IAAKC,IAAI,kBACvC,uBAAMzK,UAAW,YAAjB,kCAAoD,EAAKH,MAAMsH,aAAed,EAAWuC,WAAa,SAAW,eAE9G,EAAK/I,MAAMsH,aAAed,EAAW0D,WACrC,gCACH,2DACA,wBAAQ/J,UAAW,YAAaC,QAAS,EAAKiI,YAA9C,+BAGG,yDAMVf,U,GAlOejH,aAuObC,cAAW2G,I,SKhRrBD,O,uBAAAA,I,qBAAAA,I,qBAAAA,I,iBAAAA,I,+BAAAA,I,sBAAAA,M,SAuBC5E,E,kDAEF,WAAY5C,GAAoC,IAAD,8BAC3C,cAAMA,IA+FVsL,iBAAmB,SAAC3D,GAChB,IAAMtE,EAAOsE,EAAME,aACnB,EAAK1H,SAAS,CACVoL,UAAW/D,EAAUgE,QACrBzB,aAAc,CAACxB,GAAIlF,EAAKkF,GAAI9C,GAAIpC,EAAKoC,GAAIH,QAASjC,EAAKiC,YApGhB,EAwG/CmG,qBAAuB,SAAC9D,GACPA,EAAME,aACV6D,IAAMtI,EAAKvB,YAChB6B,EAAS0G,aAAa,EAAK5J,MAAM8I,kBAAkBvF,MAAK,SAAAU,GAC5CA,GACA,EAAKtE,SAAS,CAACiF,OAAQX,OAInC,EAAKtE,SAAS,CAACoL,UAAW/D,EAAUmE,SAExCjI,EAASkI,aAAa,EAAKpL,MAAM8I,kBAAkBvF,MAAK,SAAA8H,GAChD,EAAK1L,SAAS,CAAC0L,KAAMA,QApHc,EAsI/CC,aAtI+C,sBAsIhC,sBAAA5L,EAAA,sEACLwD,EAASoI,aAAa,EAAKtL,MAAM8I,kBAD5B,2CAtIgC,EA0I/CpF,UA1I+C,sBA0InC,sBAAAhE,EAAA,sEACFwD,EAASqI,eAAe,EAAKvL,MAAM8I,kBAAkBvF,MAAK,SAAAV,GAC5D,EAAKlD,SAAS,CAACoL,UAAW/D,EAAUwE,kBACrCC,OAAM,SAAAC,GAAK,OAAIzJ,QAAQC,IAAI,qBAAsBwJ,MAH5C,2CA1ImC,EAgJ/CrD,YAAc,WACVnF,EAAS0G,aAAa,EAAK5J,MAAM8I,kBAAkBvF,MAAK,SAAAU,GAC5CA,GACA,EAAKtE,SAAS,CAACiF,OAAQX,OAInC,EAAKtE,SAAS,CAACoL,UAAW/D,EAAUmE,QACpCjI,EAASkI,aAAa,EAAKpL,MAAM8I,kBAAkBvF,MAAK,SAAA8H,GAChD,EAAK1L,SAAS,CAAC0L,KAAMA,QAvJ7B,EAAKrL,MAAQ,CACTqB,QAAS7B,EAAM6B,QACfyH,iBAAkB,KAClBlE,OAAQ,CACJT,SAAS,EACTC,QAAS,KACTE,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GAET4G,KAAM,CACFzH,aAAc,EACdG,SAAU,EACVF,SAAU,EACVC,SAAU,GAEdiH,UAAW/D,EAAUwC,QACrBD,aAAc,MApByB,E,4FAwB/C,sBAAA7J,EAAA,sEACUO,KAAKwJ,mBADf,uBAEUxJ,KAAKyJ,wBAFf,gD,oIAKA,WAAgCiC,GAAhC,SAAAjM,EAAA,6DACIO,KAAKN,SAAS,CAAC0B,QAASsK,EAAUtK,UADtC,SAEUpB,KAAKwJ,mBAFf,uBAGUxJ,KAAKyJ,wBAHf,gD,4HAMA,mCAAAhK,EAAA,sEAC2BoC,EAAe8J,sBAD1C,OAGoB,OAFVjC,EADV,SAIQpJ,EAAUsL,kBAAkB5L,KAAKD,MAAMqB,SAEvCpB,KAAKN,SAAS,CAACmJ,iBAAkBa,IAEjCzG,EAASkI,aAAazB,GAAUpG,MAAK,SAAA8H,GAC7BpJ,QAAQC,IAAI,cAAemJ,GAC3B,EAAK1L,SAAS,CACV0L,KAAMA,OAKlBnI,EAAS0G,aAAaD,GAAUpG,MAAK,SAAAU,GACjChC,QAAQC,IAAI,iBAAkB+B,GAC1BA,EACoB,IAAhBA,EAAQK,KACR9D,OAAOO,MAAP,kBAAwB6B,EAAKvB,UAA7B,qEACA,EAAK1B,SAAS,CAACoL,UAAW/D,EAAU8E,WACV,MAAnB7H,EAAQG,QACflB,EAAS2G,SAASF,EAAU1F,EAAQG,SAASb,MAAK,SAAAyB,GAE9C,GADA/C,QAAQC,IAAI,iBAAkB8C,GACjB,MAATA,EAAe,CACf,IAAI+G,EAAa9H,EAAQG,UAAYxB,EAAKvB,UAAY2D,EAAMC,GAAKhB,EAAQG,QACzElB,EAASkH,YAAYT,EAAUoC,GAAYxI,MAAK,SAAAuE,GAC5C7F,QAAQC,IAAI,oBAAqB4F,GACjC,EAAKnI,SAAS,CACViF,OAAQX,EACR8G,UAAW/D,EAAUgE,QACrBzB,aAAc,CAACxB,GAAI9D,EAAQG,QAAUa,GAAID,EAAMC,GAAIH,QAASb,EAAQG,kBAK7EH,EAAQE,QACf,EAAKxE,SAAS,CAACiF,OAAQX,EAAS8G,UAAW/D,EAAUwE,eAErD,EAAK7L,SAAS,CAACiF,OAAQX,EAAS8G,UAAW/D,EAAUmE,SAGzD3K,OAAOO,MAAP,kBAAwB6B,EAAKvB,UAA7B,mDACA,EAAK1B,SAAS,CAACoL,UAAW/D,EAAU8E,eAa5C7L,KAAKN,SAAS,CAACoL,UAAW/D,EAAUgF,WAzD5C,gD,gIAsFA,sBAAAtM,EAAA,sEACUO,KAAKD,MAAM8I,iBADrB,OAGQ7I,KAAKD,MAAM8I,mBACX7I,KAAKD,MAAM8I,iBAAiBuB,OAAO4B,aAC9B1B,GAAG,OAAQtK,KAAKgL,sBACrBhL,KAAKD,MAAM8I,iBAAiBuB,OAAO6B,WAAW,CAACnE,GAAInF,EAAKvB,YACnDkJ,GAAG,OAAQtK,KAAK6K,kBACrB7K,KAAKD,MAAM8I,iBAAiBuB,OAAO6B,WAAW,CAACjH,GAAIrC,EAAKvB,YACnDkJ,GAAG,OAAQtK,KAAK6K,mBAT7B,gD,0EAqCA,WACI,IAAIqB,EAqCJ,OAnCIA,EADAlM,KAAKD,MAAM+K,YAAc/D,EAAUwC,QACzB,mBAAGtJ,GAAG,SAASC,UAAU,cAAzB,wBACHF,KAAKD,MAAM+K,YAAc/D,EAAU8E,QAChC,2DACmBlJ,EAAKvB,UADxB,KAEN,qBAAKlB,UAAU,MAAf,SACI,wBAAQA,UAAW,YAAaC,QAASH,KAAKqL,aAA9C,gCAGDrL,KAAKD,MAAM+K,YAAc/D,EAAUmE,MAChC,sEAC8BlL,KAAKD,MAAM4E,OAAON,IADhD,OAEN,qBAAKnE,UAAU,MAAf,SACI,wBAAQA,UAAW,YAAaC,QAASH,KAAKyD,UAA9C,8BAGDzD,KAAKD,MAAM+K,YAAc/D,EAAUwE,aAChC,0DAGHvL,KAAKD,MAAM+K,YAAc/D,EAAUgE,QACX,MAA3B/K,KAAKD,MAAMuJ,aACD,8BACN,cAAC,EAAD,CAAeT,iBAAkB7I,KAAKD,MAAM8I,iBAAkBT,YAAapI,KAAKoI,YACjEkB,aAActJ,KAAKD,MAAMuJ,iBAGlC,qBAAKpJ,UAAU,MAAf,SACN,wBAAQA,UAAW,YAAaC,QAASH,KAAKoI,YAA9C,8BAGDpI,KAAKD,MAAM+K,YAAc/D,EAAUgF,SAChC,8FAEA,yDAEP,gCACH,qBAAK7L,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,wBAEI,+BACI,mDAAsBF,KAAKD,MAAMqL,KAAKzH,gBACtC,6CAAgB3D,KAAKD,MAAMqL,KAAKtH,YAChC,6CAAgB9D,KAAKD,MAAMqL,KAAKxH,YAChC,6CAAgB5D,KAAKD,MAAMqL,KAAKvH,oBAI5C,qBAAK3D,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACKgM,a,GApNU9L,aA2NhBC,cAAW8B,GClP1BgK,IAAQC,IAAIC,IAAUC,KAEtB,IAWqBC,E,kDACjB,WAAYhN,GAAuB,IAAD,8BAC9B,cAAMA,IACDQ,MAAQ,CACTgC,UAAW,KACXX,QAAS,MACTzB,SAAS,GALiB,E,4FASlC,sBAAAF,EAAA,sEAC+Ba,EAAUkM,eADzC,kDAGcxM,KAAKyM,qBAHnB,uBAIczM,KAAK0M,uBAJnB,gD,6HAQA,8BAAAjN,EAAA,sEAC2Ba,EAAUY,cADrC,cACUyL,EADV,gBAE0BrM,EAAUwB,aAFpC,OAEQC,EAFR,OAGIC,QAAQC,IAAI,aAAc0K,GAC1B3M,KAAKN,SAAS,CAAC0B,QAASuL,EAAS,GAAIhN,SAAS,EAAOoC,UAAWA,IAJpE,gD,+HAOA,iCAAAtC,EAAA,sDACIa,EAAUsM,SAAStC,GAAG,gBAAgB,SAACuC,GACnC,EAAKnN,SAAS,CAACqC,UAAW8K,OAFlC,2C,0EAMA,WACI,OAAI7M,KAAKD,MAAMJ,QACJ,qBAAKO,UAAU,mCAAf,wBAEA,sBAAKA,UAAU,MAAf,UACH,cAAC,EAAD,CAAQkB,QAASpB,KAAKD,MAAMqB,UAC5B,qBAAKlB,UAAU,uBAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAM4M,KAAK,OAAO5M,UAAU,4BAA4B6M,MAAO,CAACC,SAAU,QAA1E,SACI,cAAC,IAAD,CAAeC,SAnDpBC,qBAmDK,SACI,eAAC,IAAD,WAC6B,MAAxBlN,KAAKD,MAAMgC,WACZ,cAAC,IAAD,CAAOoL,KAAM,YAAb,SACI,cAAC,EAAD,CAAkB/L,QAASpB,KAAKD,MAAMqB,QAASgM,QAASpN,KAAKD,MAAMgC,cAGvE,cAAC,IAAD,CAAOoL,KAAM,IAAb,SACI,cAAC,EAAD,wB,GAhDP/M,aCZlBiN,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjK,MAAK,YAAkD,IAA/CkK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.3baa65a1.chunk.js","sourcesContent":["export enum JaJankenTechnique {\n    None,\n    Guu,\n    Paa,\n    Chi\n}","import React, {Component} from \"react\"\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\n\n\ninterface HomeViewProperties extends RouteComponentProps {\n}\n\ninterface HomeViewState {\n    loading: Boolean\n}\n\nclass HomeView extends Component<HomeViewProperties, HomeViewState> {\n\n    constructor(props: HomeViewProperties) {\n        super(props)\n        this.state = {\n            loading: true\n        }\n    }\n\n    componentDidMount = async () => {\n        this.setState({loading: false})\n    }\n\n    startColiseum = async () => {\n        this.props.history.push('/coliseum')\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <p id=\"loader\" className=\"text-center\">Loading...</p>\n        } else {\n            return <div>\n                <button className=\"btn-info h-align h-center\" onClick={this.startColiseum}>Launch Coliseum</button>\n            </div>\n        }\n    }\n}\n\nexport default withRouter(HomeView)","import Web3 from 'web3'\n\ndeclare let window: any;\n\nexport default class Web3Utils {\n\n    static async loadMetamask() {\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' })\n            window.web3 = new Web3(window.ethereum)\n            return true\n        }\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n            return true\n        }\n        else {\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n            return false\n        }\n    }\n\n    // @ts-ignore\n    static getEth(): EthereumProvider | null {\n        return window.ethereum\n    }\n\n    static async getNetwork(): Promise<number> {\n        return window.web3.eth.net.getId()\n    }\n\n    static async getAccounts(): Promise<string[]> {\n        return window.web3.eth.getAccounts()//window.ethereum.request({ method: 'eth_requestAccounts' })\n    }\n\n    static getDefaultAccount(): string | null {\n        return window.web3.eth.defaultAccount\n    }\n\n    static setDefaultAccount(account: any) {\n        window.web3.eth.defaultAccount = account\n    }\n\n    static encode(value: string): string {\n       return window.web3.utils.fromAscii(value)\n    }\n\n    static nullAddress() {\n        return '0x0000000000000000000000000000000000000000';\n    }\n\n    static nullBytes() {\n        return '0x0000000000000000000000000000000000000000000000000000000000000000';\n    }\n}","import React, {Component} from 'react'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\n\ntype NavbarProperties = {\n    account: String,\n}\ntype NavbarState = {\n    account: String,\n    loading: Boolean\n}\n\nexport default class Navbar extends Component<NavbarProperties, NavbarState> {\n    constructor(props: NavbarProperties) {\n        super(props)\n        this.state = {\n            account: props.account,\n            loading: true\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({loading: false})\n    }\n\n    render() {\n        return <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <div className=\"col-md-2\">\n                <a className=\"navbar-brand\"\n                   href=\"https://github.com/Draym/jajanken-evm\"\n                   target=\"_blank\"\n                   rel=\"noopener noreferrer\">\n                    <span><FontAwesomeIcon icon={['fab', \"github\"]}/> smart-contracts</span>\n                </a>\n            </div>\n            <div className=\"col-md-8 text-center\">\n                <span className=\"navbar-brand\">JaJanKen Coliseum</span>\n            </div>\n            <div className=\"col-md-2\">\n                <small id=\"account\" className=\"text-white\">{this.props.account}</small>\n            </div>\n        </nav>\n    }\n}","import JaJankenColiseum from './contracts/JaJankenColiseum.json'\nimport Web3Utils from \"./Web3Utils\";\n\ndeclare let window: any;\n\nexport default class ContractLoader {\n    static async instantiateColiseum() {\n        const networkId = await Web3Utils.getNetwork()\n        console.log(\"network\", networkId)\n        // @ts-ignore\n        const JaJankenColiseumData = JaJankenColiseum.networks[networkId]\n        console.log(\"JaJankenColiseumData\", JaJankenColiseumData)\n        if (JaJankenColiseumData) {\n            return new window.web3.eth.Contract(JaJankenColiseum.abi, JaJankenColiseumData.address)\n        } else {\n            window.alert('JaJankenColiseum contract not deployed to detected network.')\n            return null\n        }\n\n    }\n}","export default class NumberUtils {\n    static from(value: any): number {\n        return parseInt(value.toString())\n    }\n}","import Web3Utils from \"./Web3Utils\";\n\nexport default class Lina {\n\n    static async call(method: any, data: object = {}) {\n        return method.call({from: Lina.account(), ...data})\n    }\n\n    static async send(method: any, data: object = {}) {\n        return method.send({from: Lina.account(), ...data})\n    }\n\n    static account() {\n        return Web3Utils.getDefaultAccount()\n    }\n}","import NumberUtils from \"../utils/NumberUtils\";\nimport {PlayerStats} from \"./data/PlayerStats\";\nimport {GameStats} from \"./data/GameStats\";\nimport {OpponentStats} from \"./data/OpponentStats\";\nimport Lina from \"../blockchain/Lina\";\nimport Web3Utils from \"../blockchain/Web3Utils\";\nimport {JaJankenTechnique} from \"./data/JaJankenTechnique\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {MatchStats} from \"./data/MatchStats\";\n\nexport default class JaJanken {\n\n    static async getGameEntranceTicketFee(contract: any): Promise<number> {\n        return await Lina.call(contract.methods.entranceTicketFee())\n    }\n\n    static async joinColiseum(contract: any) {\n        this.getGameEntranceTicketFee(contract).then(entranceTicket => {\n            Lina.send(contract.methods.joinGame(), {value: entranceTicket})\n        })\n    }\n\n    static async joinMatchQueue(contract: any) {\n        Lina.send(contract.methods.joinMatch()).then(_ => {\n        })\n    }\n\n    static async getGameStats(contract: any): Promise<GameStats> {\n        const alivePlayers = await Lina.call(contract.methods.alivePlayers())\n        const totalPaa = await Lina.call(contract.methods.totalPaa())\n        const totalChi = await Lina.call(contract.methods.totalChi())\n        const totalGuu = await Lina.call(contract.methods.totalGuu())\n        return {\n            alivePlayers: NumberUtils.from(alivePlayers),\n            totalPaa: NumberUtils.from(totalPaa),\n            totalChi: NumberUtils.from(totalChi),\n            totalGuu: NumberUtils.from(totalGuu)\n        }\n    }\n\n    static async getMyProfile(contract: any): Promise<PlayerStats | null> {\n        const profile = await Lina.call(contract.methods.getProfile())\n        const queued = await Lina.call(contract.methods.queued())\n        if (profile) {\n            return {\n                inQueue: queued === Web3Utils.getDefaultAccount(),\n                inMatch: profile.inMatch === Web3Utils.nullAddress() ? null : profile.inMatch,\n                nen: NumberUtils.from(profile.nen),\n                guu: NumberUtils.from(profile.guu),\n                paa: NumberUtils.from(profile.paa),\n                chi: NumberUtils.from(profile.chi)\n            }\n        } else return null\n    }\n\n    static async getOpponent(contract: any, playerAddress: string | null): Promise<OpponentStats | null> {\n        if (playerAddress == null)\n            return null\n        const player = await Lina.call(contract.methods.getPlayer(playerAddress))\n        if (player) {\n            return {\n                nen: NumberUtils.from(player.nen),\n                techniques: NumberUtils.from(player.techniques),\n            }\n        } else return null\n    }\n\n    static async getMatch(contract: any, matchId: string): Promise<MatchStats | null> {\n        const match = await Lina.call(contract.methods.matches(matchId))\n        if (match) {\n            return {\n                p2: match.p2,\n                p1Hidden: match.p1Hidden,\n                p2Hidden: match.p2Hidden,\n                p1Revealed: parseInt(match.p1Revealed),\n                p2Revealed: parseInt(match.p2Revealed),\n                playTime: parseInt(match.playTime),\n                revealTime: parseInt(match.revealTime)\n            }\n        } else return null\n    }\n\n    static Player = class {\n\n        static getKey(): string {\n            let key = localStorage.getItem('jajanken-key$' + Lina.account())\n            if (key == null) {\n                key = this.initKey()\n            }\n            return key\n        }\n\n        static initKey(): string {\n            const key = uuidv4().substring(0, 20)\n            localStorage.setItem('jajanken-key$' + Lina.account(), key)\n            return key\n        }\n\n        static getPlayed(): JaJankenTechnique {\n            let key = localStorage.getItem('jajanken-played$' + Lina.account())\n            if (key == null || key === '') {\n                return JaJankenTechnique.None\n            } else {\n                return parseInt(key)\n            }\n        }\n\n        static savePlay(technique: JaJankenTechnique) {\n            localStorage.setItem('jajanken-played$' + Lina.account(), technique.toString())\n        }\n\n        static async commitPlay(contract: any, matchId: string, technique: JaJankenTechnique) {\n            Lina.call(contract.methods.encodeAction(Lina.account(), technique, Web3Utils.encode(this.getKey()))).then(encodedTechnique => {\n                Lina.send(contract.methods.playMatch(encodedTechnique, matchId)).then(_ => {\n                })\n            })\n        }\n\n        static async revealPlay(contract: any, matchId: string, technique: JaJankenTechnique) {\n            Lina.send(contract.methods.revealMatch(technique, Web3Utils.encode(this.getKey()), matchId)).then(_ => {\n            })\n        }\n    }\n}\n","export default __webpack_public_path__ + \"static/media/guu.b4d646ff.png\";","import React, {Component} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport JaJanken from \"../../../game/JaJanken\";\nimport {TechniqueImg} from \"../../../resources/images\";\nimport {CurrentMatch} from \"../../../game/data/CurrentMatch\";\nimport {JaJankenTechnique} from \"../../../game/data/JaJankenTechnique\";\nimport Lina from \"../../../blockchain/Lina\";\nimport Web3Utils from \"../../../blockchain/Web3Utils\";\n\n\nenum MatchState {\n    Loading,\n    PickPlay,\n    Commit,\n    CommitWait,\n    Reveal,\n    RevealWait,\n    Result,\n    MatchEnded\n}\n\nenum MatchEnding {\n    WINNER,\n    LOOSER,\n    DRAW\n}\n\n\ninterface ColiseumMatchProperties extends RouteComponentProps {\n    jajankenColiseum: any,\n    currentMatch: CurrentMatch,\n    backToLobby: () => void\n}\n\ninterface ColiseumMatchState {\n    nenBalance: number,\n    availableGuu: number,\n    availablePaa: number,\n    availableChi: number,\n    currentPick: JaJankenTechnique,\n    match: CurrentMatch,\n    matchState: MatchState,\n    matchResult: MatchResult | null\n}\n\ninterface MatchResult {\n    opponent: string,\n    opponentPlayed: JaJankenTechnique,\n    winner: string,\n    result: MatchEnding\n}\n\nclass ColiseumMatch extends Component<ColiseumMatchProperties, ColiseumMatchState> {\n\n    constructor(props: ColiseumMatchProperties) {\n        super(props)\n\n        this.state = {\n            nenBalance: 0,\n            availableGuu: 0,\n            availablePaa: 0,\n            availableChi: 0,\n            currentPick: JaJanken.Player.getPlayed(),\n            match: props.currentMatch,\n            matchState: MatchState.Loading,\n            matchResult: null\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadColiseumData()\n        await this.subscribeToGameEvents()\n    }\n\n    async loadColiseumData() {\n        let coliseum = await this.props.jajankenColiseum\n        JaJanken.getMyProfile(coliseum).then(profile => {\n                if (profile) {\n                    if (profile.nen === 0) {\n                        this.setState({matchState: MatchState.Result})\n                        window.alert(`Account ${Lina.account()} has previously lost all his nen, please re-join the game first!`)\n                    } else if (profile.chi === 0 && profile.paa === 0 && profile.guu === 0) {\n                        this.setState({matchState: MatchState.Result})\n                        window.alert(`Account ${Lina.account()} has no card to play, you can withdraw you gain or re-join the game!`)\n                    } else {\n                        this.setState({\n                            nenBalance: profile.nen,\n                            availableGuu: profile.guu,\n                            availablePaa: profile.paa,\n                            availableChi: profile.chi,\n                            matchState: MatchState.PickPlay\n                        })\n                    }\n                } else {\n                    this.setState({matchState: MatchState.Result})\n                    window.alert(`Account ${Lina.account()} do not exist yet, please join the game first!`)\n                }\n\n                JaJanken.getMatch(coliseum, this.state.match.matchId).then(match => {\n                    console.log(\"{match}[init] match: \", match)\n                    if (match != null) {\n                        let meHidden;\n                        let opHidden;\n                        let meRevealed;\n                        let opRevealed;\n\n\n                        if (match.p2 === Web3Utils.nullAddress()) {\n                            this.setState({matchState: MatchState.MatchEnded})\n                        } else {\n                            if (Lina.account() === this.state.match.matchId) {\n                                meHidden = match.p1Hidden\n                                opHidden = match.p2Hidden\n                                meRevealed = match.p1Revealed\n                                opRevealed = match.p2Revealed\n                            } else {\n                                meHidden = match.p2Hidden\n                                opHidden = match.p1Hidden\n                                meRevealed = match.p2Revealed\n                                opRevealed = match.p1Revealed\n                            }\n\n                            if (meRevealed !== JaJankenTechnique.None) {\n                                if (opRevealed !== JaJankenTechnique.None) {\n                                    this.setState({matchState: MatchState.Result})\n                                } else {\n                                    this.setState({matchState: MatchState.RevealWait})\n                                }\n                            } else {\n                                if (opRevealed !== JaJankenTechnique.None) {\n                                    this.setState({matchState: MatchState.Reveal})\n                                } else {\n                                    if (meHidden !== Web3Utils.nullBytes()) {\n                                        if (opHidden !== Web3Utils.nullBytes()) {\n                                            this.setState({matchState: MatchState.Reveal})\n                                        } else {\n                                            this.setState({matchState: MatchState.CommitWait})\n                                        }\n                                    } else {\n                                        this.setState({\n                                            currentPick: JaJanken.Player.getPlayed(),\n                                            matchState: JaJanken.Player.getPlayed() !== JaJankenTechnique.None ? MatchState.Commit : MatchState.PickPlay\n                                        })\n                                    }\n                                }\n                            }\n                        }\n                    }\n                })\n            }\n        )\n\n        JaJanken.getOpponent(coliseum, this.state.match.p1 === Lina.account() ? this.state.match.p2 : this.state.match.p1).then(opponent => {\n            console.log(\"[test] opponent: \", opponent)\n        })\n    }\n\n    async subscribeToGameEvents() {\n        await this.props.jajankenColiseum\n\n        this.props.jajankenColiseum.events.MatchEnd({p1: Lina.account()})\n            .on('data', this.handleMatchEnd)\n        this.props.jajankenColiseum.events.MatchEnd({p2: Lina.account()})\n            .on('data', this.handleMatchEnd)\n        this.props.jajankenColiseum.events.MatchPlayed({matchId: this.state.match.matchId})\n            .on('data', this.handleMatchPlayed)\n    }\n\n    handleMatchEnd = (event: any) => {\n        JaJanken.Player.savePlay(JaJankenTechnique.None)\n        const data = event.returnValues\n        this.setState({\n            matchState: MatchState.Result,\n            matchResult: {\n                result: data.winner === Web3Utils.nullAddress() ? MatchEnding.DRAW : (data.winner === Lina.account() ? MatchEnding.WINNER : MatchEnding.LOOSER),\n                opponent: data.p1 === Lina.account() ? data.p2 : data.p1,\n                opponentPlayed: data.p1 === Lina.account() ? parseInt(data.p2Played) : parseInt(data.p1Played),\n                winner: data.winner\n            }\n        })\n    }\n\n    handleMatchPlayed = (_: any) => {\n        this.setState({\n            matchState: MatchState.Reveal\n        })\n    }\n\n    backToLobby = () => {\n        this.setState({currentPick: JaJankenTechnique.None})\n        this.props.backToLobby()\n    }\n\n    backToPickPlay = () => {\n        JaJanken.Player.savePlay(JaJankenTechnique.None)\n        this.setState({currentPick: JaJankenTechnique.None, matchState: MatchState.PickPlay})\n    }\n\n    pickGuu = () => {\n        JaJanken.Player.savePlay(JaJankenTechnique.Guu)\n        this.setState({currentPick: JaJankenTechnique.Guu, matchState: MatchState.Commit})\n    }\n    pickChi = () => {\n        JaJanken.Player.savePlay(JaJankenTechnique.Chi)\n        this.setState({currentPick: JaJankenTechnique.Chi, matchState: MatchState.Commit})\n    }\n    pickPaa = () => {\n        JaJanken.Player.savePlay(JaJankenTechnique.Paa)\n        this.setState({currentPick: JaJankenTechnique.Paa, matchState: MatchState.Commit})\n    }\n\n    commitPlay = async () => {\n        JaJanken.Player.commitPlay(this.props.jajankenColiseum, this.state.match.matchId, this.state.currentPick).then(_ => {\n            this.setState({matchState: MatchState.CommitWait})\n        })\n    }\n\n    revealPlay = async () => {\n        await JaJanken.Player.revealPlay(this.props.jajankenColiseum, this.state.match.matchId, this.state.currentPick).then(_ => {\n            this.setState({matchState: MatchState.RevealWait})\n        })\n    }\n\n    render() {\n        let currentPick = TechniqueImg.fromTechnique(this.state.currentPick)\n\n        let matchState = () => {\n            if (this.state.matchState === MatchState.Loading) {\n                return <p id=\"loader\" className=\"text-center\">Loading...</p>\n            } else if (this.state.matchState === MatchState.PickPlay) {\n                return <div>\n                    <button onClick={this.pickGuu} disabled={this.state.availableGuu === 0}><img className={this.state.availableGuu === 0 ? \"img-disabled\" : \"\"} src={TechniqueImg.guu} width={200} alt=\"guu\"/></button>\n                    <button onClick={this.pickChi} disabled={this.state.availableChi === 0}><img className={this.state.availableChi === 0 ? \"img-disabled\" : \"\"} src={TechniqueImg.chi} width={200} alt=\"chi\"/></button>\n                    <button onClick={this.pickPaa} disabled={this.state.availablePaa === 0}><img className={this.state.availablePaa === 0 ? \"img-disabled\" : \"\"} src={TechniqueImg.paa} width={200} alt=\"paa\"/></button>\n                </div>\n            } else if (this.state.matchState === MatchState.Commit) {\n                return <div>\n                    <img src={currentPick} width={300} alt=\"currentPicket\"/>\n                    <button className={\"btn-light\"} onClick={this.commitPlay}>Commit play!</button>\n                    <div>\n                        <button className={\"btn-light\"} onClick={this.backToPickPlay}>Back to PickPlay</button>\n                    </div>\n                </div>\n            } else if (this.state.matchState === MatchState.Reveal) {\n                return <div>\n                    <img src={currentPick} width={300} alt=\"currentPicket\"/>\n                    <button className={\"btn-light\"} onClick={this.revealPlay}>Fight!</button>\n                </div>\n            } else if (this.state.matchState === MatchState.Result) {\n                let opponentPick = TechniqueImg.fromTechnique(this.state.matchResult!.opponentPlayed)\n                return <div className=\"row\">\n                    <div>\n                        <img src={currentPick} width={300} alt=\"currentPicket\"/>\n                        <span>...VS...</span>\n                        <img src={opponentPick} width={300} alt=\"currentPicket\"/>\n                    </div>\n                    <div>\n                        <h2>You {this.state.matchResult!.result === MatchEnding.WINNER ? \"Win!\" : (this.state.matchResult!.result === MatchEnding.LOOSER ? \"Loose :/\" : \"Equality\")}</h2>\n                        <button className={\"btn-light\"} onClick={this.backToLobby}>Back to Lobby!</button>\n                    </div>\n                </div>\n            } else if (this.state.matchState === MatchState.CommitWait || this.state.matchState === MatchState.RevealWait) {\n                return <div>\n                    <img src={currentPick} width={300} alt=\"currentPicket\"/>\n                    <span className={\"btn-light\"}>waiting for opponent {this.state.matchState === MatchState.CommitWait ? \"commit\" : \"reveal\"}</span>\n                </div>\n            } else if (this.state.matchState === MatchState.MatchEnded) {\n                return <div>\n                    <h4>Match is already finished</h4>\n                    <button className={\"btn-light\"} onClick={this.backToLobby}>Back to Lobby!</button>\n                </div>\n            } else {\n                return <div>How did you get there?</div>\n            }\n        }\n\n        return <div>\n            <h4>Profile ({this.state.nenBalance}Nen): [{this.state.availableGuu} Guu][{this.state.availableChi} Chi][{this.state.availablePaa} Paa]</h4>\n            {matchState()}\n        </div>\n    }\n}\n\nexport default withRouter(ColiseumMatch);","export default __webpack_public_path__ + \"static/media/chi.9d6708ec.png\";","export default __webpack_public_path__ + \"static/media/paa.063b3a7d.png\";","export default __webpack_public_path__ + \"static/media/hidden.ee575a9e.png\";","import guu from \"./techniques/guu.png\"\nimport chi from \"./techniques/chi.png\"\nimport paa from \"./techniques/paa.png\"\nimport hidden from \"./techniques/hidden.png\"\nimport {JaJankenTechnique} from \"../game/data/JaJankenTechnique\";\n\nexport const TechniqueImg = {\n    guu: guu,\n    chi: chi,\n    paa: paa,\n    hidden: hidden,\n    fromTechnique: (technique) => {\n        if (technique === JaJankenTechnique.Chi) {\n            return chi\n        } else if (technique === JaJankenTechnique.Guu) {\n            return guu\n        } else if (technique === JaJankenTechnique.Paa) {\n            return paa\n        } else {\n            return hidden\n        }\n    }\n}","import React, {Component} from \"react\"\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\nimport ContractLoader from \"../../../blockchain/ContractLoader\"\nimport Web3Utils from \"../../../blockchain/Web3Utils\"\nimport JaJanken from \"../../../game/JaJanken\"\nimport ColiseumMatch from \"./ColiseumMatch\"\nimport {CurrentMatch} from \"../../../game/data/CurrentMatch\"\nimport {PlayerStats} from \"../../../game/data/PlayerStats\"\nimport {GameStats} from \"../../../game/data/GameStats\"\nimport Lina from \"../../../blockchain/Lina\"\n\nenum GameState {\n    NotValid,\n    Loading,\n    NeedPay,\n    Lobby,\n    LookingMatch,\n    InMatch\n}\n\ninterface JaJankenColiseumProperties extends RouteComponentProps {\n    account: string,\n    network: number\n}\n\ninterface JaJankenColiseumState {\n    account: string,\n    jajankenColiseum: any,\n    player: PlayerStats,\n    game: GameStats,\n    gameState: GameState,\n    currentMatch: CurrentMatch | null\n}\n\nclass JaJankenColiseum extends Component<JaJankenColiseumProperties, JaJankenColiseumState> {\n\n    constructor(props: JaJankenColiseumProperties) {\n        super(props)\n        this.state = {\n            account: props.account,\n            jajankenColiseum: null,\n            player: {\n                inQueue: false,\n                inMatch: null,\n                nen: 0,\n                guu: 0,\n                paa: 0,\n                chi: 0\n            },\n            game: {\n                alivePlayers: 0,\n                totalGuu: 0,\n                totalPaa: 0,\n                totalChi: 0\n            },\n            gameState: GameState.Loading,\n            currentMatch: null\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadColiseumData()\n        await this.subscribeToGameEvents()\n    }\n\n    async componentWillReceiveProps(nextProps: JaJankenColiseumProperties) {\n        this.setState({account: nextProps.account})\n        await this.loadColiseumData()\n        await this.subscribeToGameEvents()\n    }\n\n    async loadColiseumData() {\n        const coliseum = await ContractLoader.instantiateColiseum()\n\n        if (coliseum != null) {\n            Web3Utils.setDefaultAccount(this.state.account)\n\n            this.setState({jajankenColiseum: coliseum})\n\n            JaJanken.getGameStats(coliseum).then(game => {\n                    console.log(\"[init] game\", game)\n                    this.setState({\n                        game: game\n                    })\n                }\n            )\n\n            JaJanken.getMyProfile(coliseum).then(profile => {\n                console.log(\"[init] profile\", profile)\n                if (profile) {\n                    if (profile.nen === 0) {\n                        window.alert(`Account ${Lina.account()} has previously lost all his nen, please re-join the game first!`)\n                        this.setState({gameState: GameState.NeedPay})\n                    } else if (profile.inMatch != null) {\n                        JaJanken.getMatch(coliseum, profile.inMatch).then(match => {\n                            console.log(\"[init] match: \", match)\n                            if (match != null) {\n                                let opponentId = profile.inMatch === Lina.account() ? match.p2 : profile.inMatch\n                                JaJanken.getOpponent(coliseum, opponentId).then(opponent => {\n                                    console.log(\"[init] opponent: \", opponent)\n                                    this.setState({\n                                        player: profile,\n                                        gameState: GameState.InMatch,\n                                        currentMatch: {p1: profile.inMatch!, p2: match.p2, matchId: profile.inMatch!}\n                                    })\n                                })\n                            }\n                        })\n                    } else if (profile.inQueue) {\n                        this.setState({player: profile, gameState: GameState.LookingMatch})\n                    } else {\n                        this.setState({player: profile, gameState: GameState.Lobby})\n                    }\n                } else {\n                    window.alert(`Account ${Lina.account()} do not exist yet, please join the game first!`)\n                    this.setState({gameState: GameState.NeedPay})\n                }\n            })\n            // JaJanken.getOpponent(coliseum, Lina.account()).then(opponent => {\n            //     console.log(\"[test] me: \", opponent)\n            // })\n            // JaJanken.getMatch(coliseum, Lina.account()!).then(match => {\n            //     console.log(\"[test] match: \", match)\n            //     JaJanken.getOpponent(coliseum, match!.p2).then(opponent => {\n            //         console.log(\"[test] opponent: \", opponent)\n            //     })\n            // })\n        } else {\n            this.setState({gameState: GameState.NotValid})\n        }\n    }\n\n    handleStartMatch = (event: any) => {\n        const data = event.returnValues\n        this.setState({\n            gameState: GameState.InMatch,\n            currentMatch: {p1: data.p1, p2: data.p2, matchId: data.matchId}\n        })\n    }\n\n    handlePlayerJoinGame = (event: any) => {\n        const data = event.returnValues\n        if (data.p === Lina.account()) {\n            JaJanken.getMyProfile(this.state.jajankenColiseum).then(profile => {\n                    if (profile) {\n                        this.setState({player: profile})\n                    }\n                }\n            )\n            this.setState({gameState: GameState.Lobby})\n        }\n        JaJanken.getGameStats(this.state.jajankenColiseum).then(game => {\n                this.setState({game: game})\n            }\n        )\n    }\n\n    async subscribeToGameEvents() {\n        await this.state.jajankenColiseum\n\n        if (this.state.jajankenColiseum) {\n            this.state.jajankenColiseum.events.PlayerJoin()\n                .on('data', this.handlePlayerJoinGame)\n            this.state.jajankenColiseum.events.MatchStart({p1: Lina.account()})\n                .on('data', this.handleStartMatch)\n            this.state.jajankenColiseum.events.MatchStart({p2: Lina.account()})\n                .on('data', this.handleStartMatch)\n        }\n    }\n\n    joinColiseum = async () => {\n        await JaJanken.joinColiseum(this.state.jajankenColiseum)\n    }\n\n    joinMatch = async () => {\n        await JaJanken.joinMatchQueue(this.state.jajankenColiseum).then(data => {\n            this.setState({gameState: GameState.LookingMatch})\n        }).catch(error => console.log(\"failed join Match:\", error))\n    }\n\n    backToLobby = () => {\n        JaJanken.getMyProfile(this.state.jajankenColiseum).then(profile => {\n                if (profile) {\n                    this.setState({player: profile})\n                }\n            }\n        )\n        this.setState({gameState: GameState.Lobby})\n        JaJanken.getGameStats(this.state.jajankenColiseum).then(game => {\n                this.setState({game: game})\n            }\n        )\n    }\n\n    render() {\n        let content\n        if (this.state.gameState === GameState.Loading) {\n            content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n        } else if (this.state.gameState === GameState.NeedPay) {\n            content = <div>\n                Welcome to the Coliseum {Lina.account()} !\n                <div className=\"row\">\n                    <button className={\"btn-light\"} onClick={this.joinColiseum}>Join Coliseum</button>\n                </div>\n            </div>\n        } else if (this.state.gameState === GameState.Lobby) {\n            content = <div>\n                Have fun in the Coliseum ! You got {this.state.player.nen} nen\n                <div className=\"row\">\n                    <button className={\"btn-light\"} onClick={this.joinMatch}>Join Match!</button>\n                </div>\n            </div>\n        } else if (this.state.gameState === GameState.LookingMatch) {\n            content = <div>\n                Looking for an opponent\n            </div>\n        } else if (this.state.gameState === GameState.InMatch) {\n            if (this.state.currentMatch != null) {\n                content = <div>\n                    <ColiseumMatch jajankenColiseum={this.state.jajankenColiseum} backToLobby={this.backToLobby}\n                                   currentMatch={this.state.currentMatch}/>\n                </div>\n            } else {\n                content = <div className=\"row\">\n                    <button className={\"btn-light\"} onClick={this.backToLobby}>Back to Lobby!</button>\n                </div>\n            }\n        } else if (this.state.gameState === GameState.NotValid) {\n            content = <div>JaJanken Coliseum is not deployed on your selected network.</div>\n        } else {\n            content = <div>How did you get there?</div>\n        }\n        return <div>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    Game state:\n                    <ul>\n                        <li>Players in-game: {this.state.game.alivePlayers}</li>\n                        <li>total Guu: {this.state.game.totalGuu}</li>\n                        <li>total Paa: {this.state.game.totalPaa}</li>\n                        <li>Total Chi: {this.state.game.totalChi}</li>\n                    </ul>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    {content}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default withRouter(JaJankenColiseum)","import './App.scss';\nimport HomeView from \"./web/views/HomeView\";\nimport React, {Component} from 'react';\nimport Web3Utils from \"./blockchain/Web3Utils\";\nimport Navbar from \"./web/views/Navbar\";\n\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faGithub, faLinkedinIn} from '@fortawesome/free-brands-svg-icons';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport JaJankenColiseum from \"./web/views/coliseum/JaJankenColiseum\";\n\nlibrary.add(faGithub, faLinkedinIn);\n\nconst routerBaseName = process.env.PUBLIC_URL;\n\ninterface AppProperties {\n}\n\ninterface AppState {\n    networkId: number | null,\n    account: string,\n    loading: boolean\n}\n\nexport default class App extends Component<AppProperties, AppState> {\n    constructor(props: AppProperties) {\n        super(props)\n        this.state = {\n            networkId: null,\n            account: '0x0',\n            loading: true\n        }\n    }\n\n    async componentDidMount() {\n        let metamaskLoaded = await Web3Utils.loadMetamask()\n        if (metamaskLoaded) {\n            await this.loadBlockchainData()\n            await this.listenNetworkChanges()\n        }\n    }\n\n    async loadBlockchainData() {\n        const accounts = await Web3Utils.getAccounts()\n        let networkId = await Web3Utils.getNetwork()\n        console.log(\"accounts: \", accounts)\n        this.setState({account: accounts[0], loading: false, networkId: networkId})\n    }\n\n    async listenNetworkChanges() {\n        Web3Utils.getEth().on('chainChanged', (chainId: number) => {\n            this.setState({networkId: chainId})\n        })\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n        } else {\n            return <div className=\"App\">\n                <Navbar account={this.state.account}/>\n                <div className=\"container-fluid mt-5\">\n                    <div className=\"row\">\n                        <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{maxWidth: '100%'}}>\n                            <BrowserRouter basename={routerBaseName}>\n                                <Switch>\n                                    {this.state.networkId != null &&\n                                    <Route path={\"/coliseum\"}>\n                                        <JaJankenColiseum account={this.state.account} network={this.state.networkId}/>\n                                    </Route>\n                                    }\n                                    <Route path={\"/\"}>\n                                        <HomeView/>\n                                    </Route>\n                                </Switch>\n                            </BrowserRouter>\n                        </main>\n                    </div>\n                </div>\n            </div>\n        }\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}